Functional test que va a testear el batching en la vista de listado-reportes:

    >>> import os

    >>> app = layer['app']
    >>> portal = layer['portal']
    >>> request = layer['request']

    >>> from DateTime import DateTime

    >>> import hashlib

    >>> from plone.testing.z2 import Browser
    >>> browser = Browser(app)
    >>> portalURL = portal.absolute_url()

    >>> from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD
    >>> browser.open(portalURL + '/login_form')
    >>> browser.getControl(name='__ac_name').value = SITE_OWNER_NAME
    >>> browser.getControl(name='__ac_password').value = SITE_OWNER_PASSWORD
    >>> browser.getControl(name='submit').click()

    >>> 'You are now logged in' in browser.contents
    True

Vamos al home y agregamos una seccion "I report", para poder agregar reportes

    >>> browser.getLink('Home').click()
    >>> browser.getLink('I report section').click()
    >>> browser.getControl('Title').value = 'Soy reportero'
    >>> browser.getControl('Save').click()
    >>> section_url = portalURL + '/soy-reportero'
    >>> browser.getLink('Publish').click()

Agregamos 30 reportes

    >>> browser.open(portalURL + '/logout')
    >>> browser.open(section_url)

    >>> for index in range(10,40):
    ...     browser.getLink(id='add-new-report').click()
    ...     browser.getControl('Title').value = "title-%s"%index
    ...     browser.getControl('Name').value = "Frapell"
    ...     browser.getControl('Country').value = ["AR"]
    ...     browser.getControl(name="form.widgets.file_id").value = "ireport-valid-id"
    ...     browser.getControl(name="form.widgets.file_type").value = "image"
    ...     browser.getControl(name="form.widgets.date-day").value = "1"
    ...     browser.getControl(name="form.widgets.date-month").value = ['1']
    ...     browser.getControl(name="form.widgets.date-year").value = "2012"
    ...     browser.getControl("Send").click()

Vamos a generar los callback url y dejamos los primeros 10 como privados:

    >>> for index in range(20,40):
    ...     m = hashlib.md5()
    ...     secret = "security_key"
    ...     id = "title-%s"%index
    ...     file_id = "ireport-valid-id"
    ...     m.update(secret+file_id)
    ...     digest = m.hexdigest()
    ...     callback_url = "%s/%s/@@processed_result?key=%s&type=success" % (section_url, id, digest)
    ...     browser.open(callback_url)

Volvemos a ingresar al sitio y publicamos los ultimos 10:

    >>> browser.open(portalURL + '/login_form')
    >>> browser.getControl(name='__ac_name').value = SITE_OWNER_NAME
    >>> browser.getControl(name='__ac_password').value = SITE_OWNER_PASSWORD
    >>> browser.getControl(name='submit').click()

    >>> 'You are now logged in' in browser.contents
    True

    >>> for index in range(30,40):
    ...     id = "title-%s"%index
    ...     browser.open("%s/%s" % (section_url, id))
    ...     browser.getLink("Publish").click()


Vamos a la vista de listado
XXX: Como no podemos probar el orden, simplemente vamos a probar la cantidad de items
que aparecen:

    >>> browser.open(section_url+'/listado-reportes')

Reportes privados y publicos no deberian ser visibles aqui, pero si los pendientes de revision

    >>> reports = ['title-%s' % index in browser.contents for index in range(10,20)]
    >>> reports.count(True)
    0
    >>> reports.count(False)
    10

    >>> reports = ['title-%s' % index in browser.contents for index in range(20,30)]
    >>> reports.count(True)
    10
    >>> reports.count(False)
    0

    >>> reports = ['title-%s' % index in browser.contents for index in range(30,40)]
    >>> reports.count(True)
    0
    >>> reports.count(False)
    10

Vemos un listado de los reportes privados

    >>> browser.getLink("Reports in process").click()

Reportes pendientes y publicos no deberian ser visibles aqui, pero si los privados

    >>> reports = ['title-%s' % index in browser.contents for index in range(10,20)]
    >>> reports.count(True)
    10
    >>> reports.count(False)
    0

    >>> reports = ['title-%s' % index in browser.contents for index in range(20,30)]
    >>> reports.count(True)
    0
    >>> reports.count(False)
    10

    >>> reports = ['title-%s' % index in browser.contents for index in range(30,40)]
    >>> reports.count(True)
    0
    >>> reports.count(False)
    10

Vemos un listado de los reportes privados

    >>> browser.getLink("Published reports").click()

Reportes pendientes y privados no deberian ser visibles aqui, pero si los publicos

    >>> reports = ['title-%s' % index in browser.contents for index in range(10,20)]
    >>> reports.count(True)
    0
    >>> reports.count(False)
    10

    >>> reports = ['title-%s' % index in browser.contents for index in range(20,30)]
    >>> reports.count(True)
    0
    >>> reports.count(False)
    10

    >>> reports = ['title-%s' % index in browser.contents for index in range(30,40)]
    >>> reports.count(True)
    10
    >>> reports.count(False)
    0


Por ultimo, volvemos a pedir el listado de reportes pendientes, deberiamos ver lo mismo que vimos al ingresar a la vista sin pedir ningun reporte puntual

    >>> browser.getLink("Pending review reports").click()

Reportes privados y publicos no deberian ser visibles aqui, pero si los pendientes de revision

    >>> reports = ['title-%s' % index in browser.contents for index in range(10,20)]
    >>> reports.count(True)
    0
    >>> reports.count(False)
    10

    >>> reports = ['title-%s' % index in browser.contents for index in range(20,30)]
    >>> reports.count(True)
    10
    >>> reports.count(False)
    0

    >>> reports = ['title-%s' % index in browser.contents for index in range(30,40)]
    >>> reports.count(True)
    0
    >>> reports.count(False)
    10